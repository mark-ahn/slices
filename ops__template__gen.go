// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

type _Float32 struct{}

func (_ _Float32) Range(start, end, step float32) []float32 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]float32, 0, int(l/step))
	var i float32
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Float32T _Float32

type _Float64 struct{}

func (_ _Float64) Range(start, end, step float64) []float64 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]float64, 0, int(l/step))
	var i float64
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Float64T _Float64

type _Int struct{}

func (_ _Int) Range(start, end, step int) []int {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]int, 0, int(l/step))
	var i int
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var IntT _Int

type _Int16 struct{}

func (_ _Int16) Range(start, end, step int16) []int16 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]int16, 0, int(l/step))
	var i int16
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Int16T _Int16

type _Int32 struct{}

func (_ _Int32) Range(start, end, step int32) []int32 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]int32, 0, int(l/step))
	var i int32
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Int32T _Int32

type _Int64 struct{}

func (_ _Int64) Range(start, end, step int64) []int64 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]int64, 0, int(l/step))
	var i int64
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Int64T _Int64

type _Int8 struct{}

func (_ _Int8) Range(start, end, step int8) []int8 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]int8, 0, int(l/step))
	var i int8
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Int8T _Int8

type _Uint struct{}

func (_ _Uint) Range(start, end, step uint) []uint {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]uint, 0, int(l/step))
	var i uint
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var UintT _Uint

type _Uint16 struct{}

func (_ _Uint16) Range(start, end, step uint16) []uint16 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]uint16, 0, int(l/step))
	var i uint16
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Uint16T _Uint16

type _Uint32 struct{}

func (_ _Uint32) Range(start, end, step uint32) []uint32 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]uint32, 0, int(l/step))
	var i uint32
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Uint32T _Uint32

type _Uint64 struct{}

func (_ _Uint64) Range(start, end, step uint64) []uint64 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]uint64, 0, int(l/step))
	var i uint64
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Uint64T _Uint64

type _Uint8 struct{}

func (_ _Uint8) Range(start, end, step uint8) []uint8 {
	l := end - start
	if l < 0 {
		l = 0
	}
	res := make([]uint8, 0, int(l/step))
	var i uint8
	for i = 0; i < l; i += step {
		res = append(res, start+i)
	}
	return res
}

var Uint8T _Uint8
