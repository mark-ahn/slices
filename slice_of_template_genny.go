// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

type InterfaceSliceInf interface {
	At(int) interface{}
	Set(int, interface{})
	Count() int
}

type InterfaceSliceInf32 interface {
	At(int32) interface{}
	Set(int32, interface{})
	Count() int32
}

type InterfaceSlice []interface{}
type InterfaceSliceI32 []interface{}

type InterfaceSliceIter []interface{}

func NewInterfaceSlice(i int) InterfaceSlice {
	return InterfaceSlice(make([]interface{}, i))
}

func (__ InterfaceSlice) At(i int) interface{} {
	return __[i]
}
func (__ InterfaceSlice) Set(i int, d interface{}) {
	__[i] = d
}

func (__ InterfaceSlice) Count() int {
	return len(__)
}

func NewInterfaceSliceI32(i int) InterfaceSliceI32 {
	return InterfaceSliceI32(make([]interface{}, i))
}

func (__ InterfaceSliceI32) At(i int32) interface{} {
	return __[int(i)]
}

func (__ InterfaceSliceI32) Set(i int32, d interface{}) {
	__[i] = d
}

func (__ InterfaceSliceI32) Count() int32 {
	return int32(len(__))
}

func (__ InterfaceSliceIter) Range(f func(i int, d interface{}) bool) {
	for i := range __ {
		if !f(i, __[i]) {
			break
		}
	}
}
func (__ InterfaceSliceIter) Map(f func(i int, d interface{}) interface{}) InterfaceSliceIter {
	rval := make([]interface{}, len(__))
	for i := range __ {
		rval[i] = f(i, __[i])
	}
	return InterfaceSliceIter(rval)
}
