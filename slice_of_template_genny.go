// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

type SliceOfInterfaceIterIf interface {
	Range(f func(i int, d interface{}) bool)
	Map(f func(i int, d interface{}) interface{}) SliceOfInterfaceIf
}
type SliceOfInterfaceIf interface {
	Get(int) interface{}
	Set(int, interface{}) interface{}
	Len() int
}
type SliceOfInterfaceAsIterIf interface {
	AsIter() SliceOfInterfaceIterIf
}

type SliceOfInterfaceIf32 interface {
	Get(int32) interface{}
	Set(int32, interface{}) interface{}
	Len() int32
}

type SliceOfInterface []interface{}

func (__ SliceOfInterface) Get(i int) interface{} {
	return __[i]
}
func (__ SliceOfInterface) Set(i int, d interface{}) interface{} {
	old := __[i]
	__[i] = d
	return old
}

func (__ SliceOfInterface) Len() int {
	return len(__)
}

func (__ SliceOfInterface) AsIter() SliceOfInterfaceIterIf {
	return SliceOfInterfaceIter(__)
}

type SliceOfInterfaceI32 []interface{}

func (__ SliceOfInterfaceI32) Get(i int32) interface{} {
	return __[int(i)]
}

func (__ SliceOfInterfaceI32) Set(i int32, d interface{}) interface{} {
	old := __[i]
	__[i] = d
	return old
}

func (__ SliceOfInterfaceI32) Len() int32 {
	return int32(len(__))
}

func (__ SliceOfInterfaceI32) AsIter() SliceOfInterfaceIterIf {
	return SliceOfInterfaceIter(__)
}

type SliceOfInterfaceSt struct {
	somes SliceOfInterface
}

func NewSliceOfInterfaceSt(i int) *SliceOfInterfaceSt {
	return &SliceOfInterfaceSt{somes: SliceOfInterface(make([]interface{}, i))}
}

func (__ *SliceOfInterfaceSt) Get(i int) interface{} {
	return __.somes.Get(i)
}
func (__ *SliceOfInterfaceSt) Set(i int, d interface{}) interface{} {
	return __.somes.Set(i, d)
}

func (__ *SliceOfInterfaceSt) Len() int {
	return __.somes.Len()
}

func (__ *SliceOfInterfaceSt) AsIter() SliceOfInterfaceIterIf {
	return __.somes.AsIter()
}

type SliceOfInterfaceIter []interface{}

func (__ SliceOfInterfaceIter) Range(f func(i int, d interface{}) bool) {
	for i := range __ {
		if !f(i, __[i]) {
			break
		}
	}
}
func (__ SliceOfInterfaceIter) Map(f func(i int, d interface{}) interface{}) SliceOfInterfaceIf {
	rval := make([]interface{}, len(__))
	for i := range __ {
		rval[i] = f(i, __[i])
	}
	return SliceOfInterface(rval)
}
